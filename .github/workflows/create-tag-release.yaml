name: Create Tag and Release

on:
  workflow_call:
    inputs:
      version:
        description: "Semantic version to release. Ex: major, minor, or patch"
        type: string
        required: true
      images:
        description: "List of image names. Example: csi-powerstore,csi-isilon"
        type: string
        required: true

jobs:
  build-and-scan:
    name: Build and Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Install dependencies
        run: go mod tidy

      - name: Build binaries
        run: |
          echo "Building binaries to attach to the release if any..."
          if "${{ inputs.images == 'cert-csi' }}"; then
              make build
              mv cert-csi cert-csi-linux-amd64
              echo "BIN_NAME=cert-csi-linux-amd64" >> $GITHUB_ENV
          fi
          if "${{ contains(inputs.images, 'dell-csi-replicator') || contains(inputs.images, 'dell-replication-controller') }}"; then
              cd repctl
              make build
              mv repctl repctl-linux-amd64
              mv repctl-linux-amd64 ../
              echo "BIN_NAME=repctl-linux-amd64" >> $GITHUB_ENV
          fi

      - name: Upload Binaries
        if: ${{ env.BIN_NAME != '' }}
        uses: actions/upload-artifact@v4.6.1
        env:
          BIN_NAME: ${{ env.BIN_NAME }}
        with:
          name: ${{ env.BIN_NAME }}
          path: ${{ env.BIN_NAME }}

  # decrypt-secret:
  #   name: Decrypt Secret File
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Import GPG private key
  #       run: |
  #         echo "$GPG_PRIVATE_KEY" | gpg --batch --import
  #       env:
  #         GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

  #     - name: Decrypt secret file
  #       run: |
  #         gpg --quiet --batch --yes --decrypt --passphrase="$GPG_PASSPHRASE" \
  #         --output secret.txt secret.txt.gpg
  #       env:
  #         GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

  release-and-tag:
    name: Tag and Release
    needs: build-and-scan
    uses: KshitijaKakde/common-github-actions/.github/workflows/release-creator.yaml@main
    with:
      version: ${{ inputs.version }}
    secrets: inherit
